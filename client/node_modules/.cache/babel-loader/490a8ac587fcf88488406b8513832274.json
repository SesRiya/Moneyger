{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport baseURL from \"../../../utils/baseURL\"; //Login actions\n\nexport const loginUserAction = createAsyncThunk(\"user/login\", async (payload, _ref) => {\n  let {\n    rejectWithValue,\n    getState,\n    dispatch\n  } = _ref;\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n\n  try {\n    //htttp address\n    const {\n      data\n    } = await axios.post(`${baseURL}/users/login`, payload, config);\n    return data;\n  } catch (error) {\n    var _error$response;\n\n    if (!(error !== null && error !== void 0 && error.response)) {\n      throw error;\n    }\n\n    return rejectWithValue(error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data);\n  }\n}); //Register actions\n\nexport const registerUserAction = createAsyncThunk(\"user/register\", async (payload, _ref2) => {\n  let {\n    rejectWithValue,\n    getState,\n    dispatch\n  } = _ref2;\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n\n  try {\n    //htttp address\n    const {\n      data\n    } = await axios.post(`${baseURL}/users/register`, payload, config);\n    return data;\n  } catch (error) {\n    var _error$response2;\n\n    if (!(error !== null && error !== void 0 && error.response)) {\n      throw error;\n    }\n\n    return rejectWithValue(error === null || error === void 0 ? void 0 : (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data);\n  }\n}); //slices\n\nconst usersSlices = createSlice({\n  name: 'users',\n  initialState: {\n    auth: 'False',\n    users: [\"Bob\", \"Marley\"]\n  },\n  extraReducers: builder => {\n    // handle pending state for login action\n    builder.addCase(loginUserAction.pending, (state, action) => {\n      state.userLoading = true;\n      state.userAppErr = undefined;\n      state.userServerErr = undefined;\n    }); // handle success state\n\n    builder.addCase(loginUserAction.fulfilled, (state, action) => {\n      state.userAuth = action === null || action === void 0 ? void 0 : action.payload;\n      state.userLoading = false;\n      state.userAppErr = undefined;\n      state.userServerErr = undefined;\n    }); //handle rejected state\n\n    builder.addCase(loginUserAction.rejected, (state, action) => {\n      var _action$payload, _action$error;\n\n      state.userLoading = false;\n      state.userAppErr = action === null || action === void 0 ? void 0 : (_action$payload = action.payload) === null || _action$payload === void 0 ? void 0 : _action$payload.message;\n      state.userServerError = action === null || action === void 0 ? void 0 : (_action$error = action.error) === null || _action$error === void 0 ? void 0 : _action$error.message;\n    }); // handle pending state for login action\n\n    builder.addCase(loginUserAction.pending, (state, action) => {\n      state.userLoading = true;\n      state.userAppErr = undefined;\n      state.userServerErr = undefined;\n    }); // handle success state\n\n    builder.addCase(loginUserAction.fulfilled, (state, action) => {\n      state.userAuth = action === null || action === void 0 ? void 0 : action.payload;\n      state.userLoading = false;\n      state.userAppErr = undefined;\n      state.userServerErr = undefined;\n    }); //handle rejected state\n\n    builder.addCase(loginUserAction.rejected, (state, action) => {\n      var _action$payload2, _action$error2;\n\n      state.userLoading = false;\n      state.userAppErr = action === null || action === void 0 ? void 0 : (_action$payload2 = action.payload) === null || _action$payload2 === void 0 ? void 0 : _action$payload2.message;\n      state.userServerError = action === null || action === void 0 ? void 0 : (_action$error2 = action.error) === null || _action$error2 === void 0 ? void 0 : _action$error2.message;\n    });\n  }\n});\nexport default usersSlices.reducer;","map":{"version":3,"sources":["D:/VIC U/SWEN 504/Moneyger/client/src/redux/slices/users/usersSlices.js"],"names":["createAsyncThunk","createSlice","axios","baseURL","loginUserAction","payload","rejectWithValue","getState","dispatch","config","headers","data","post","error","response","registerUserAction","usersSlices","name","initialState","auth","users","extraReducers","builder","addCase","pending","state","action","userLoading","userAppErr","undefined","userServerErr","fulfilled","userAuth","rejected","message","userServerError","reducer"],"mappings":"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","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport axios from \"axios\";\r\nimport baseURL from \"../../../utils/baseURL\";\r\n\r\n\r\n//Login actions\r\n\r\nexport const loginUserAction = createAsyncThunk(\r\n  \"user/login\",\r\n  async (payload, { rejectWithValue, getState, dispatch }) => {\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n    try {\r\n      //htttp address\r\n      const { data } = await axios.post(\r\n        `${baseURL}/users/login`,\r\n        payload,\r\n        config\r\n      );\r\n      return data;\r\n    } catch (error) {\r\n        if(!error?.response){\r\n            throw error;\r\n        }\r\n        return rejectWithValue(error?.response?.data);\r\n    }\r\n  }\r\n);\r\n\r\n//Register actions\r\n\r\nexport const registerUserAction = createAsyncThunk(\r\n  \"user/register\",\r\n  async (payload, { rejectWithValue, getState, dispatch }) => {\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n    try {\r\n      //htttp address\r\n      const { data } = await axios.post(\r\n        `${baseURL}/users/register`,\r\n        payload,\r\n        config\r\n      );\r\n      return data;\r\n    } catch (error) {\r\n        if(!error?.response){\r\n            throw error;\r\n        }\r\n        return rejectWithValue(error?.response?.data);\r\n    }\r\n  }\r\n);\r\n\r\n\r\n//slices\r\n\r\nconst usersSlices = createSlice({\r\n    name: 'users',\r\n    initialState:{auth: 'False', users:[\"Bob\", \"Marley\"]},\r\n    extraReducers: (builder)=>{\r\n        // handle pending state for login action\r\n        builder.addCase(loginUserAction.pending, (state, action) => {\r\n            state.userLoading = true;\r\n            state.userAppErr = undefined;\r\n            state.userServerErr = undefined;\r\n        });\r\n\r\n        // handle success state\r\n        builder.addCase(loginUserAction.fulfilled, (state,action) => {\r\n            state.userAuth = action?.payload;\r\n            state.userLoading = false;\r\n            state.userAppErr = undefined;\r\n            state.userServerErr = undefined;\r\n        });\r\n\r\n        //handle rejected state\r\n        builder.addCase(loginUserAction.rejected, (state, action) =>{\r\n            state.userLoading = false;\r\n            state.userAppErr = action?.payload?.message;\r\n            state.userServerError = action?.error?.message;\r\n        });\r\n\r\n         // handle pending state for login action\r\n         builder.addCase(loginUserAction.pending, (state, action) => {\r\n          state.userLoading = true;\r\n          state.userAppErr = undefined;\r\n          state.userServerErr = undefined;\r\n      });\r\n\r\n      // handle success state\r\n      builder.addCase(loginUserAction.fulfilled, (state,action) => {\r\n          state.userAuth = action?.payload;\r\n          state.userLoading = false;\r\n          state.userAppErr = undefined;\r\n          state.userServerErr = undefined;\r\n      });\r\n\r\n      //handle rejected state\r\n      builder.addCase(loginUserAction.rejected, (state, action) =>{\r\n          state.userLoading = false;\r\n          state.userAppErr = action?.payload?.message;\r\n          state.userServerError = action?.error?.message;\r\n      });\r\n     },\r\n});\r\n\r\nexport default usersSlices.reducer;"]},"metadata":{},"sourceType":"module"}